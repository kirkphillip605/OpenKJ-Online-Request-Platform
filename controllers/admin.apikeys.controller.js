// Filepath: controllers/admin.apikeys.controller.js
const db = require('../models');
const logger = require('../utils/logger');
const ApiKey = db.ApiKey;

const apiKeyController = {
    createApiKey: async (req, res) => {
        // Key is generated automatically by default value in model
        const { description } = req.body;
        // Key generated by this admin user
        const userId = req.auth.userId; // The admin performing the action

        try {
            const newApiKey = await ApiKey.create({
                user_id: userId, // Associate key with the admin who created it
                description: description || 'OpenKJ API Key' // Default description
            });
            logger.info(`[Admin API Keys] Admin ${userId} created new API Key ID: ${newApiKey.api_key_id}.`);
            // Return the full key value ONLY on creation
            res.status(201).json({ error: false, apiKey: newApiKey });
        } catch (error) {
             logger.error(`[Admin API Keys] Error creating API key by Admin ${userId}:`, error);
            res.status(500).json({ error: true, errorString: 'Error creating API key.' });
        }
    },

    listApiKeys: async (req, res) => {
        // Optional: Filter by user_id if needed via query param
        const requestingAdminId = req.auth.userId;
         const { user_id } = req.query;
         const whereClause = {};
         if (user_id) {
             whereClause.user_id = user_id;
         }

        try {
            const apiKeys = await ApiKey.findAll({
                where: whereClause,
                // Exclude the actual key from the list for security? Or show partial?
                // attributes: { exclude: ['key'] }, // Exclude full key from general list
                include: [{ model: db.User, as: 'user', attributes: ['user_id', 'username'] }] // Show who generated it
            });
            logger.debug(`[Admin API Keys] Admin ${requestingAdminId} listed API keys.`);
            res.status(200).json({ error: false, apiKeys });
        } catch (error) {
             logger.error(`[Admin API Keys] Error listing API keys by Admin ${requestingAdminId}:`, error);
            res.status(500).json({ error: true, errorString: 'Error retrieving API keys.' });
        }
    },

     updateApiKey: async (req, res) => {
        const { apiKeyId } = req.params;
        const { description } = req.body;
        const requestingAdminId = req.auth.userId;

        if (description === undefined) {
            return res.status(400).json({ error: true, errorString: 'Description field is required for update.' });
        }

        try {
            const apiKey = await ApiKey.findByPk(apiKeyId);
            if (!apiKey) {
                return res.status(404).json({ error: true, errorString: 'API Key not found.' });
            }

            await apiKey.update({ description });
            logger.info(`[Admin API Keys] Admin ${requestingAdminId} updated API Key ID: ${apiKeyId}.`);

            // Exclude key from response after update
            const { key, ...apiKeyResponse } = apiKey.toJSON();
            res.status(200).json({ error: false, apiKey: apiKeyResponse });

        } catch (error) {
             logger.error(`[Admin API Keys] Error updating API Key ${apiKeyId} by Admin ${requestingAdminId}:`, error);
            res.status(500).json({ error: true, errorString: 'Error updating API key.' });
        }
     },

    deleteApiKey: async (req, res) => {
        const { apiKeyId } = req.params;
        const requestingAdminId = req.auth.userId;
        try {
            const apiKey = await ApiKey.findByPk(apiKeyId);
            if (!apiKey) {
                return res.status(404).json({ error: true, errorString: 'API Key not found.' });
            }
            await apiKey.destroy();
            logger.info(`[Admin API Keys] Admin ${requestingAdminId} deleted API Key ID: ${apiKeyId}.`);
            res.status(204).send();
        } catch (error) {
             logger.error(`[Admin API Keys] Error deleting API Key ${apiKeyId} by Admin ${requestingAdminId}:`, error);
            res.status(500).json({ error: true, errorString: 'Error deleting API key.' });
        }
    },
};
module.exports = apiKeyController;